<?php
/**
 * @file
 * Preprocessing for the Sailor Theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_css_alter().
 *
 * Remove conflicting CSS.
 */
function sailor_css_alter(&$css, AttachedAssetsInterface $assets) {
  unset($css['core/assets/vendor/jquery.ui/themes/base/datepicker.css']);
  unset($css['core/assets/vendor/jquery.ui/themes/base/theme.css']);
}

/**
 * Implements hook_theme_suggestions_form_alter().
 *
 * Add a suggestion for the form id.
 */
function sailor_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#form_id'])) {
    $form_id = $variables['element']['#form_id'];

    if (strpos($form_id, 'contact_message') !== FALSE) {
      if ($form_id != 'contact_message_personal_form') {
        $suggestions[] = 'form__contact';
        return;
      }
    }

    if (strpos($form_id, 'comment') !== FALSE) {
      $routes = [
        'comment.reply',
        'entity.comment.edit_form',
      ];

      if (!in_array(\Drupal::routeMatch()->getRouteName(), $routes)) {
        return;
      }
    }
  }

  $suggestions[] = 'form__one_half_modal';
}

/**
 * Impelements hook_form_user_pass_alter().
 *
 * Add the class to the password email text.
 */
function sailor_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['mail']['#prefix'] = '<p class="full-width">';
}

/**
 * Impelements hook_form_user_login_form_alter().
 *
 * Add help text and links.
 */
function sailor_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $pass = Url::fromRoute('user.pass');
  $register = Url::fromRoute('user.register');
  if ($pass->access() || $register->access()) {
    $form['links'] = [
      '#type' => 'container',
      '#weight' => 1000,
      '#attributes' => [
        'class' => [
          'full-width',
        ],
      ],
    ];

    if ($pass->access()) {
      $form['links']['pass'] = [
        '#type' => 'container',
        'link' => [
          '#type' => 'link',
          '#title' => t('Forgotten Password?'),
          '#url' => $pass,
        ],
      ];
    }

    if ($register->access()) {
      $form['links']['register'] = [
        '#type' => 'container',
        'text' => [
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => t('Dont have an account yet?'),
        ],
        'link' => [
          '#type' => 'link',
          '#title' => t('Sign up'),
          '#url' => $register,
        ],
      ];
    }
  }
}

/**
 * Impelements hook_form_user_pass_reset_alter().
 *
 * Ensures that every item has the proper class.
 */
function sailor_form_user_pass_reset_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => [
        'full-width',
      ],
    ],
  ];

  $form['wrapper']['message'] = $form['message'];
  $form['wrapper']['help'] = $form['help'];

  unset($form['message']);
  unset($form['help']);
}

/**
 * Impelements hook_form_user_register_form_alter().
 *
 * Add login links.
 */
function sailor_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $login = Url::fromRoute('user.login');
  if ($login->access()) {
    $form['login'] = [
      '#type' => 'container',
      '#weight' => 1000,
      '#attributes' => [
        'class' => [
          'full-width',
        ],
      ],
      'text' => [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => t('Already have an account?'),
      ],
      'space' => [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => ' ',
      ],
      'link' => [
        '#type' => 'link',
        '#title' => t('Login'),
        '#url' => $login,
      ],
    ];
  }
}

/**
 * Impelements hook_form_alter().
 *
 * Add classes to submit button.
 */
function sailor_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['actions']['submit'])) {
    $build_info = $form_state->getBuildInfo();

    $form['actions']['submit']['#attributes']['class'][] = 'button';
    $form['actions']['submit']['#attributes']['class'][] = 'gold';

    if (isset($build_info['base_form_id']) && $build_info['base_form_id'] == 'comment_form') {
      $form['actions']['submit']['#attributes']['class'][] = 'large';
    }
    else {
      $form['actions']['submit']['#attributes']['class'][] = 'medium';
      $form['actions']['submit']['#attributes']['class'][] = 'full';
    }
  }

  if (!empty($form['actions']['preview'])) {
    $form['actions']['preview']['#access'] = FALSE;
  }

  if (strpos($form['#form_id'], 'contact_message') !== FALSE) {
    $form['langcode']['#access'] = FALSE;
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function sailor_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $storage = \Drupal::entityManager()->getStorage('block');
  $block = $storage->load($variables['elements']['#id']);

  // Customize the Menus in the footer.
  if ($block->getPlugin()->getBaseId() == 'system_menu_block') {
    if (in_array($block->getRegion(), sailor_footer_regions())) {
      $suggestions[] = 'block__system_menu_block__footer';
    }
  }
  // Customize all of the blocks in the footer.
  elseif (in_array($block->getRegion(), sailor_footer_regions())) {
    $suggestions[] = 'block__footer';
  }
}

/**
 * Implements template_preprocess_block().
 */
function sailor_preprocess_block(array &$variables) {
  $storage = \Drupal::entityManager()->getStorage('block');
  $block = $storage->load($variables['elements']['#id']);

  // Only modify blocks that use theme menu.
  if (!empty($variables['content']['#theme'])) {
    if (strrpos($variables['content']['#theme'], 'menu') === 0) {

      // Add the `main-nav` and 'jetmenu' class(es) when block is placed in the
      // primary menu region.
      if ($block->getRegion() == 'primary_menu') {
        $variables['attributes']['class'][] = 'main-nav';

        $variables['content']['#attributes']['class'][] = 'jetmenu';
        $variables['content']['#attributes']['id'] = Html::getUniqueId('jetmenu');
      }

      // Alter the theme hook suggestions.
      $region = $block->getRegion();
      if (in_array($region, sailor_footer_regions())) {
        $region = 'footer';
      }

      if (strrpos($variables['elements']['#configuration']['id'], ':') !== FALSE) {
        list($plugin_id, $menu_id) = explode(':', $variables['elements']['#configuration']['id']);
        $variables['content']['#theme'] = 'menu__' . $region . '__' . $menu_id;
      }
      else {
        $variables['content']['#theme'] = $variables['content']['#theme'] . '__' . $region;
      }
    }
  }

}

/**
 * Implments template_preprocess_sailor_follow_block().
 *
 * Remove the title from link fields, since the title messes up the display of
 * the icons.
 */
function sailor_preprocess_sailor_follow_block(array &$variables) {
  if (!empty($variables['content']['links'])) {
    foreach ($variables['content']['links'] as &$field) {
      foreach (Element::children($field) as $delta) {
        $item = &$field[$delta];

        // Link Field.
        if (!empty($item['#type']) && $item['#type'] == 'link') {
          $item['#title'] = '';
        }
      }
    }
  }
}

/**
 * Implments template_preprocess_sailor_crew().
 *
 * Add size icons for field values in the crew section.
 */
function sailor_preprocess_sailor_crew(array &$variables) {
  if (!empty($variables['content']['main'])) {
    foreach ($variables['content']['main'] as &$field) {
      $children = Element::children($field);
      $count = count($children);
      $class = 'one-fourth';

      switch ($count) {
        case 1:
          $class = 'full-width';
          break;

        case 2:
          $class = 'one-half';
          break;

        case 3:
          $class = 'one-third';
          break;

        default:
          $class = 'one-fourth';
          break;
      }

      foreach ($children as $delta) {
        $item = &$field[$delta];

        $item['#attributes']['class'][] = 'item';
        $item['#attributes']['class'][] = $class;
      }

    }
  }
}

/**
 * Implments template_preprocess_sailor_crew_member().
 *
 * Remove the title from link fields, since the title messes up the display of
 * the icons.
 */
function sailor_preprocess_sailor_crew_member(array &$variables) {
  if (!empty($variables['content']['contact'])) {
    foreach ($variables['content']['contact'] as &$field) {
      foreach (Element::children($field) as $delta) {
        $item = &$field[$delta];

        // Link Field.
        if (!empty($item['#type']) && $item['#type'] == 'link') {
          $item['#title'] = '';
        }
      }
    }
  }
}

/**
 * Implments template_preprocess_sailor_account().
 */
function sailor_preprocess_sailor_account(array &$variables) {
  if (!empty($variables['content']['intro'])) {
    foreach ($variables['content']['intro'] as &$field) {
      foreach (Element::children($field) as $delta) {
        $item = &$field[$delta];

        // Add the `profile-pic` class to the images in the intro.
        if (!empty($item['#theme']) && $item['#theme'] == 'image_formatter') {
          $item['#item_attributes']['class'][] = 'profile-pic';
        }
      }
    }
  }

  if (!empty($variables['content']['sidebar_left'])) {
    foreach ($variables['content']['sidebar_left'] as &$field) {
      foreach (Element::children($field) as $delta) {
        $item = &$field[$delta];

        // Change the theme of the sidebar "tabs".
        if (!empty($item[0]['#theme']) && $item[0]['#theme'] == 'menu_local_tasks') {
          $item[0]['#theme'] = 'menu_local_tasks__sidebar';
        }
      }
    }
  }
}

/**
 * Implments template_preprocess_error().
 *
 * Add the error image to the tempalte.
 */
function sailor_preprocess_sailor_error(array &$variables) {
  $variables['image'] = [
    '#theme' => 'image',
    '#uri' => drupal_get_path('theme', 'sailor') . '/images/ico3-gold.png',
  ];
}

/**
 * Implmenets template_preprocess_menu_local_tasks__sidebar().
 *
 * Add the 'current' class to the current menu item.
 */
function sailor_preprocess_menu_local_tasks__sidebar(array &$variables) {
  foreach (['primary', 'secondary'] as $tasks) {
    if (empty($variables[$tasks])) {
      continue;
    }

    $variables[$tasks] = array_map('sailor_task_current_class', $variables[$tasks]);
  }
}

/**
 * Implmeents template_preprocess_form__one_half_modal().
 *
 * Add the title as a variable for the form.
 */
function sailor_preprocess_form__one_half_modal(array &$variables) {
  $variables['title'] = sailor_get_title();
}

/**
 * Implmeents template_preprocess_form().
 *
 * Add an id to the contact form.
 */
function sailor_preprocess_form(array &$variables) {
  if (strpos($variables['element']['#form_id'], 'contact_message') !== FALSE) {
    $variables['attributes']['id'] = Html::getUniqueId('contactform');
  }
}

/**
 * Implmeents template_preprocess_form_element().
 *
 * Add the classes to the form.
 */
function sailor_preprocess_form_element(array &$variables) {
  $variables['attributes']['class'][] = 'full-width';
}

/**
 * Implmeents template_preprocess_container().
 *
 * Add the classes to the form.
 */
function sailor_preprocess_container(array &$variables) {
  if (!$variables['has_parent'] || $variables['element']['#type'] == 'actions') {
    $variables['attributes']['class'][] = 'full-width';
  }
  if (!empty($variables['element']['widget'])) {
    $variables['attributes']['class'][] = 'full-width';
  }
}

/**
 * Implmements template_preprocess_menu_local_tasks__tabs().
 *
 * Count number of tabs and add class.
 */
function sailor_preprocess_menu_local_tasks__tabs(&$variables) {
  $variables['attributes']['role'] = 'navigation';
  $variables['attributes']['class'][] = 'tabs';
  $variables['attributes']['class'][] = sailor_number_converter(count($variables['primary']));

  foreach ($variables['primary'] as &$link) {
    if (!$link['#active']) {
      continue;
    }

    $link['#attributes']['class'][] = 'current';
  }
}

/**
 * Implmements template_preprocess_region().
 *
 * Add the region name as a class.
 */
function sailor_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = 'region-' . $variables['region'];
}

/**
 * Converts a number to a string.
 *
 * @param int $number
 *   Number to be converted.
 *
 * @return string
 *   Number in string format.
 */
function sailor_number_converter($number) {
  $strings = sailor_number_strings();

  return isset($strings[$number]) ? $strings[$number] : '';
}

/**
 * Number strings.
 *
 * @return array
 *   An array of number strings.
 */
function sailor_number_strings() {
  return [
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
    'ten',
  ];
}

/**
 * Returns the Sailor Footer Regions.
 *
 * @return array
 *   Collection of regions that are in the "footer".
 */
function sailor_footer_regions() {
  return [
    'footer_first',
    'footer_second',
    'footer_third',
    'footer_fourth',
    'footer_copy',
  ];
}

/**
 * Add the 'current' class to every active link.
 *
 * @param array $task
 *   A task array.
 *
 * @return array
 *   A task array.
 *
 * @see array_map
 */
function sailor_task_current_class(array $task) {
  if (!empty($task['#active']) && $task['#active'] == TRUE) {
    $task['#attributes']['class'][] = 'current';
  }
  return $task;
}

/**
 * Sailor Get Page Title.
 *
 * @return string
 *   Title of the Page.
 */
function sailor_get_title() {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  return \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
}
